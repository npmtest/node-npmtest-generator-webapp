{"/home/travis/build/npmtest/node-npmtest-generator-webapp/test.js":"/* istanbul instrument in package npmtest_generator_webapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-webapp/lib.npmtest_generator_webapp.js":"/* istanbul instrument in package npmtest_generator_webapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_webapp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_webapp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-webapp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-webapp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_webapp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_webapp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_webapp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_webapp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_webapp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_webapp.__dirname + '/lib.npmtest_generator_webapp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-webapp/node_modules/generator-webapp/app/index.js":"'use strict';\nvar generators = require('yeoman-generator');\nvar yosay = require('yosay');\nvar chalk = require('chalk');\nvar wiredep = require('wiredep');\nvar mkdirp = require('mkdirp');\nvar _s = require('underscore.string');\n\nmodule.exports = generators.Base.extend({\n  constructor: function () {\n    var testLocal;\n\n    generators.Base.apply(this, arguments);\n\n    this.option('skip-welcome-message', {\n      desc: 'Skips the welcome message',\n      type: Boolean\n    });\n\n    this.option('skip-install-message', {\n      desc: 'Skips the message after the installation of dependencies',\n      type: Boolean\n    });\n\n    this.option('test-framework', {\n      desc: 'Test framework to be invoked',\n      type: String,\n      defaults: 'mocha'\n    });\n\n    this.option('babel', {\n      desc: 'Use Babel',\n      type: Boolean,\n      defaults: true\n    });\n\n    if (this.options['test-framework'] === 'mocha') {\n      testLocal = require.resolve('generator-mocha/generators/app/index.js');\n    } else if (this.options['test-framework'] === 'jasmine') {\n      testLocal = require.resolve('generator-jasmine/generators/app/index.js');\n    }\n\n    this.composeWith(this.options['test-framework'] + ':app', {\n      options: {\n        'skip-install': this.options['skip-install']\n      }\n    }, {\n      local: testLocal\n    });\n  },\n\n  initializing: function () {\n    this.pkg = require('../package.json');\n  },\n\n  prompting: function () {\n    if (!this.options['skip-welcome-message']) {\n      this.log(yosay('\\'Allo \\'allo! Out of the box I include HTML5 Boilerplate, jQuery, and a gulpfile to build your app.'));\n    }\n\n    var prompts = [{\n      type: 'checkbox',\n      name: 'features',\n      message: 'Which additional features would you like to include?',\n      choices: [{\n        name: 'Sass',\n        value: 'includeSass',\n        checked: true\n      }, {\n        name: 'Bootstrap',\n        value: 'includeBootstrap',\n        checked: true\n      }, {\n        name: 'Modernizr',\n        value: 'includeModernizr',\n        checked: true\n      }]\n    }, {\n      type: 'list',\n      name: 'legacyBootstrap',\n      message: 'Which version of Bootstrap would you like to include?',\n      choices: [{\n        name: 'Bootstrap 3',\n        value: true\n      }, {\n        name: 'Bootstrap 4',\n        value: false\n      }],\n      when: function (answers) {\n        return answers.features.indexOf('includeBootstrap') !== -1;\n      }\n    }, {\n      type: 'confirm',\n      name: 'includeJQuery',\n      message: 'Would you like to include jQuery?',\n      default: true,\n      when: function (answers) {\n        return answers.features.indexOf('includeBootstrap') === -1;\n      }\n    }];\n\n    return this.prompt(prompts).then(function (answers) {\n      var features = answers.features;\n\n      function hasFeature(feat) {\n        return features && features.indexOf(feat) !== -1;\n      };\n\n      // manually deal with the response, get back and store the results.\n      // we change a bit this way of doing to automatically do this in the self.prompt() method.\n      this.includeSass = hasFeature('includeSass');\n      this.includeBootstrap = hasFeature('includeBootstrap');\n      this.includeModernizr = hasFeature('includeModernizr');\n      this.legacyBootstrap = answers.legacyBootstrap;\n      this.includeJQuery = answers.includeJQuery;\n\n    }.bind(this));\n  },\n\n  writing: {\n    gulpfile: function () {\n      this.fs.copyTpl(\n        this.templatePath('gulpfile.js'),\n        this.destinationPath('gulpfile.js'),\n        {\n          date: (new Date).toISOString().split('T')[0],\n          name: this.pkg.name,\n          version: this.pkg.version,\n          includeSass: this.includeSass,\n          includeBootstrap: this.includeBootstrap,\n          legacyBootstrap: this.legacyBootstrap,\n          includeBabel: this.options['babel'],\n          testFramework: this.options['test-framework']\n        }\n      );\n    },\n\n    packageJSON: function () {\n      this.fs.copyTpl(\n        this.templatePath('_package.json'),\n        this.destinationPath('package.json'),\n        {\n          includeSass: this.includeSass,\n          includeBabel: this.options['babel'],\n          includeJQuery: this.includeJQuery,\n        }\n      );\n    },\n\n    babel: function () {\n      this.fs.copy(\n        this.templatePath('babelrc'),\n        this.destinationPath('.babelrc')\n      );\n    },\n\n    git: function () {\n      this.fs.copy(\n        this.templatePath('gitignore'),\n        this.destinationPath('.gitignore'));\n\n      this.fs.copy(\n        this.templatePath('gitattributes'),\n        this.destinationPath('.gitattributes'));\n    },\n\n    bower: function () {\n      var bowerJson = {\n        name: _s.slugify(this.appname),\n        private: true,\n        dependencies: {}\n      };\n\n      if (this.includeBootstrap) {\n\n        // Bootstrap 4\n        bowerJson.dependencies = {\n          'bootstrap': '~4.0.0-alpha.6'\n        };\n        bowerJson.overrides = {\n          'bootstrap': {\n            'main': [\n              'scss/bootstrap.scss',\n              'dist/js/bootstrap.js'\n            ]\n          }\n        };\n        if (!this.includeSass) {\n          bowerJson.overrides.bootstrap.main.push('dist/css/bootstrap.css');\n        }\n\n        // Bootstrap 3\n        if (this.legacyBootstrap) {\n          if (this.includeSass) {\n            bowerJson.dependencies = {\n              'bootstrap-sass': '~3.3.5'\n            };\n            bowerJson.overrides = {\n              'bootstrap-sass': {\n                'main': [\n                  'assets/stylesheets/_bootstrap.scss',\n                  'assets/fonts/bootstrap/*',\n                  'assets/javascripts/bootstrap.js'\n                ]\n              }\n            };\n          } else {\n            bowerJson.dependencies = {\n              'bootstrap': '~3.3.5'\n            };\n            bowerJson.overrides = {\n              'bootstrap': {\n                'main': [\n                  'less/bootstrap.less',\n                  'dist/css/bootstrap.css',\n                  'dist/js/bootstrap.js',\n                  'dist/fonts/*'\n                ]\n              }\n            };\n          }\n        }\n\n      } else if (this.includeJQuery) {\n        bowerJson.dependencies['jquery'] = '~2.1.1';\n      }\n\n      if (this.includeModernizr) {\n        bowerJson.dependencies['modernizr'] = '~2.8.1';\n      }\n\n      this.fs.writeJSON('bower.json', bowerJson);\n      this.fs.copy(\n        this.templatePath('bowerrc'),\n        this.destinationPath('.bowerrc')\n      );\n    },\n\n    editorConfig: function () {\n      this.fs.copy(\n        this.templatePath('editorconfig'),\n        this.destinationPath('.editorconfig')\n      );\n    },\n\n    h5bp: function () {\n      this.fs.copy(\n        this.templatePath('favicon.ico'),\n        this.destinationPath('app/favicon.ico')\n      );\n\n      this.fs.copy(\n        this.templatePath('apple-touch-icon.png'),\n        this.destinationPath('app/apple-touch-icon.png')\n      );\n\n      this.fs.copy(\n        this.templatePath('robots.txt'),\n        this.destinationPath('app/robots.txt'));\n    },\n\n    styles: function () {\n      var css = 'main';\n\n      if (this.includeSass) {\n        css += '.scss';\n      } else {\n        css += '.css';\n      }\n\n      this.fs.copyTpl(\n        this.templatePath(css),\n        this.destinationPath('app/styles/' + css),\n        {\n          includeBootstrap: this.includeBootstrap,\n          legacyBootstrap: this.legacyBootstrap\n        }\n      );\n    },\n\n    scripts: function () {\n      this.fs.copy(\n        this.templatePath('main.js'),\n        this.destinationPath('app/scripts/main.js')\n      );\n    },\n\n    html: function () {\n      var bsPath, bsPlugins;\n\n      // path prefix for Bootstrap JS files\n      if (this.includeBootstrap) {\n\n        // Bootstrap 4\n        bsPath = '/bower_components/bootstrap/js/dist/';\n        bsPlugins = [\n          'util',\n          'alert',\n          'button',\n          'carousel',\n          'collapse',\n          'dropdown',\n          'modal',\n          'scrollspy',\n          'tab',\n          'tooltip',\n          'popover'\n        ];\n\n        // Bootstrap 3\n        if (this.legacyBootstrap) {\n          if (this.includeSass) {\n            bsPath = '/bower_components/bootstrap-sass/assets/javascripts/bootstrap/';\n          } else {\n            bsPath = '/bower_components/bootstrap/js/';\n          }\n          bsPlugins = [\n            'affix',\n            'alert',\n            'dropdown',\n            'tooltip',\n            'modal',\n            'transition',\n            'button',\n            'popover',\n            'carousel',\n            'scrollspy',\n            'collapse',\n            'tab'\n          ];\n        }\n\n      }\n\n      this.fs.copyTpl(\n        this.templatePath('index.html'),\n        this.destinationPath('app/index.html'),\n        {\n          appname: this.appname,\n          includeSass: this.includeSass,\n          includeBootstrap: this.includeBootstrap,\n          legacyBootstrap: this.legacyBootstrap,\n          includeModernizr: this.includeModernizr,\n          includeJQuery: this.includeJQuery,\n          bsPath: bsPath,\n          bsPlugins: bsPlugins\n        }\n      );\n    },\n\n    misc: function () {\n      mkdirp('app/images');\n      mkdirp('app/fonts');\n    }\n  },\n\n  install: function () {\n    this.installDependencies({\n      skipMessage: this.options['skip-install-message'],\n      skipInstall: this.options['skip-install']\n    });\n  },\n\n  end: function () {\n    var bowerJson = this.fs.readJSON(this.destinationPath('bower.json'));\n    var howToInstall =\n      '\\nAfter running ' +\n      chalk.yellow.bold('npm install & bower install') +\n      ', inject your' +\n      '\\nfront end dependencies by running ' +\n      chalk.yellow.bold('gulp wiredep') +\n      '.';\n\n    if (this.options['skip-install']) {\n      this.log(howToInstall);\n      return;\n    }\n\n    // wire Bower packages to .html\n    wiredep({\n      bowerJson: bowerJson,\n      directory: 'bower_components',\n      exclude: ['bootstrap-sass', 'bootstrap.js'],\n      ignorePath: /^(\\.\\.\\/)*\\.\\./,\n      src: 'app/index.html'\n    });\n\n    if (this.includeSass) {\n      // wire Bower packages to .scss\n      wiredep({\n        bowerJson: bowerJson,\n        directory: 'bower_components',\n        ignorePath: /^(\\.\\.\\/)+/,\n        src: 'app/styles/*.scss'\n      });\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-webapp/node_modules/generator-webapp/app/templates/gulpfile.js":"// generated on <%= date %> using <%= name %> <%= version %>\nconst gulp = require('gulp');\nconst gulpLoadPlugins = require('gulp-load-plugins');\nconst browserSync = require('browser-sync').create();\nconst del = require('del');\nconst wiredep = require('wiredep').stream;\nconst runSequence = require('run-sequence');\n\nconst $ = gulpLoadPlugins();\nconst reload = browserSync.reload;\n\nvar dev = true;\n\ngulp.task('styles', () => {<% if (includeSass) { %>\n  return gulp.src('app/styles/*.scss')\n    .pipe($.plumber())\n    .pipe($.if(dev, $.sourcemaps.init()))\n    .pipe($.sass.sync({\n      outputStyle: 'expanded',\n      precision: 10,\n      includePaths: ['.']\n    }).on('error', $.sass.logError))<% } else { %>\n  return gulp.src('app/styles/*.css')\n    .pipe($.if(dev, $.sourcemaps.init()))<% } %>\n    .pipe($.autoprefixer({browsers: ['> 1%', 'last 2 versions', 'Firefox ESR']}))\n    .pipe($.if(dev, $.sourcemaps.write()))\n    .pipe(gulp.dest('.tmp/styles'))\n    .pipe(reload({stream: true}));\n});\n\n<% if (includeBabel) { -%>\ngulp.task('scripts', () => {\n  return gulp.src('app/scripts/**/*.js')\n    .pipe($.plumber())\n    .pipe($.if(dev, $.sourcemaps.init()))\n    .pipe($.babel())\n    .pipe($.if(dev, $.sourcemaps.write('.')))\n    .pipe(gulp.dest('.tmp/scripts'))\n    .pipe(reload({stream: true}));\n});\n<% } -%>\n\nfunction lint(files) {\n  return gulp.src(files)\n    .pipe($.eslint({ fix: true }))\n    .pipe(reload({stream: true, once: true}))\n    .pipe($.eslint.format())\n    .pipe($.if(!browserSync.active, $.eslint.failAfterError()));\n}\n\ngulp.task('lint', () => {\n  return lint('app/scripts/**/*.js')\n    .pipe(gulp.dest('app/scripts'));\n});\ngulp.task('lint:test', () => {\n  return lint('test/spec/**/*.js')\n    .pipe(gulp.dest('test/spec'));\n});\n\n<% if (includeBabel) { -%>\ngulp.task('html', ['styles', 'scripts'], () => {\n<% } else { -%>\ngulp.task('html', ['styles'], () => {\n<% } -%>\n  return gulp.src('app/*.html')\n    .pipe($.useref({searchPath: ['.tmp', 'app', '.']}))\n    .pipe($.if(/\\.js$/, $.uglify({compress: {drop_console: true}})))\n    .pipe($.if(/\\.css$/, $.cssnano({safe: true, autoprefixer: false})))\n    .pipe($.if(/\\.html$/, $.htmlmin({\n      collapseWhitespace: true,\n      minifyCSS: true,\n      minifyJS: {compress: {drop_console: true}},\n      processConditionalComments: true,\n      removeComments: true,\n      removeEmptyAttributes: true,\n      removeScriptTypeAttributes: true,\n      removeStyleLinkTypeAttributes: true\n    })))\n    .pipe(gulp.dest('dist'));\n});\n\ngulp.task('images', () => {\n  return gulp.src('app/images/**/*')\n    .pipe($.cache($.imagemin()))\n    .pipe(gulp.dest('dist/images'));\n});\n\ngulp.task('fonts', () => {\n  return gulp.src(require('main-bower-files')('**/*.{eot,svg,ttf,woff,woff2}', function (err) {})\n    .concat('app/fonts/**/*'))\n    .pipe($.if(dev, gulp.dest('.tmp/fonts'), gulp.dest('dist/fonts')));\n});\n\ngulp.task('extras', () => {\n  return gulp.src([\n    'app/*',\n    '!app/*.html'\n  ], {\n    dot: true\n  }).pipe(gulp.dest('dist'));\n});\n\ngulp.task('clean', del.bind(null, ['.tmp', 'dist']));\n\ngulp.task('serve', () => {\n  runSequence(['clean', 'wiredep'], ['styles'<% if (includeBabel) { %>, 'scripts'<% } %>, 'fonts'], () => {\n    browserSync.init({\n      notify: false,\n      port: 9000,\n      server: {\n        baseDir: ['.tmp', 'app'],\n        routes: {\n          '/bower_components': 'bower_components'\n        }\n      }\n    });\n\n    gulp.watch([\n      'app/*.html',\n<% if (!includeBabel) { -%>\n      'app/scripts/**/*.js',\n<% } -%>\n      'app/images/**/*',\n      '.tmp/fonts/**/*'\n    ]).on('change', reload);\n\n    gulp.watch('app/styles/**/*.<%= includeSass ? 'scss' : 'css' %>', ['styles']);\n<% if (includeBabel) { -%>\n    gulp.watch('app/scripts/**/*.js', ['scripts']);\n<% } -%>\n    gulp.watch('app/fonts/**/*', ['fonts']);\n    gulp.watch('bower.json', ['wiredep', 'fonts']);\n  });\n});\n\ngulp.task('serve:dist', ['default'], () => {\n  browserSync.init({\n    notify: false,\n    port: 9000,\n    server: {\n      baseDir: ['dist']\n    }\n  });\n});\n\n<% if (includeBabel) { -%>\ngulp.task('serve:test', ['scripts'], () => {\n<% } else { -%>\ngulp.task('serve:test', () => {\n<% } -%>\n  browserSync.init({\n    notify: false,\n    port: 9000,\n    ui: false,\n    server: {\n      baseDir: 'test',\n      routes: {\n<% if (includeBabel) { -%>\n        '/scripts': '.tmp/scripts',\n<% } else { -%>\n        '/scripts': 'app/scripts',\n<% } -%>\n        '/bower_components': 'bower_components'\n      }\n    }\n  });\n\n<% if (includeBabel) { -%>\n  gulp.watch('app/scripts/**/*.js', ['scripts']);\n<% } -%>\n  gulp.watch(['test/spec/**/*.js', 'test/index.html']).on('change', reload);\n  gulp.watch('test/spec/**/*.js', ['lint:test']);\n});\n\n// inject bower components\ngulp.task('wiredep', () => {<% if (includeSass) { %>\n  gulp.src('app/styles/*.scss')\n    .pipe($.filter(file => file.stat && file.stat.size))\n    .pipe(wiredep({\n      ignorePath: /^(\\.\\.\\/)+/\n    }))\n    .pipe(gulp.dest('app/styles'));\n<% } %>\n  gulp.src('app/*.html')\n    .pipe(wiredep({<% if (includeBootstrap) { if (includeSass) { %>\n      exclude: ['bootstrap<% if (legacyBootstrap) { %>-sass<% } %>'],<% } else { %>\n      exclude: ['bootstrap.js'],<% }} %>\n      ignorePath: /^(\\.\\.\\/)*\\.\\./\n    }))\n    .pipe(gulp.dest('app'));\n});\n\ngulp.task('build', ['lint', 'html', 'images', 'fonts', 'extras'], () => {\n  return gulp.src('dist/**/*').pipe($.size({title: 'build', gzip: true}));\n});\n\ngulp.task('default', () => {\n  return new Promise(resolve => {\n    dev = false;\n    runSequence(['clean', 'wiredep'], 'build', resolve);\n  });\n});\n","/home/travis/build/npmtest/node-npmtest-generator-webapp/node_modules/generator-webapp/app/templates/main.js":"console.log('\\'Allo \\'Allo!');\n"}